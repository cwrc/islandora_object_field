<?php

/**
 * Implements hook_menu().
 */
function islandora_object_field_menu() {
  $items['islandora_object_field/autocomplete/%'] = array(
    'title' => 'Islandora Object Autocomplete',
    'page callback' => 'islandora_object_field_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('view fedora repository objects'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function islandora_object_field_field_info() {
  return array(
    'islandora_object_field' => array(
      'label' => t('Islandora Object'),
      'description' => t('References an object stored in a Fedora Repository using Islandora.'),
      'settings' => array('content_models' => array()),
      'instance_settings' => array(),
      'default_widget' => 'islandora_object_field_autocomplete_widget',
      'default_formatter' => 'islandora_object_field_label_formatter',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function islandora_object_field_field_schema($field) {
  $columns = array(
    'pid' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => true,
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array(
      'pid' => array('pid'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function islandora_object_field_field_settings_form($field, $instance, $has_data) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $form = array(
    'content_models' => array(
      '#type' => 'checkboxes',
      '#title' => t('Enabled content models'),
      '#description' => t('The content models allowed to be referenced with this widget'),
      '#options' => array(),
      '#disabled' => $has_data,
      '#default_value' => $field['settings']['content_models'],
    ),
  );
  foreach (islandora_get_content_models() as $cmodel) {
    $form['content_models']['#options'][$cmodel['pid']] = $cmodel['label'];
  }
  return $form;
}

/**
 * Implements hook_field_access().
 */
function islandora_object_field_field_access($op, $field, $entity_type, $entity, $account) {
  // TODO: Implement Islandora access checks on referenced object.
  return TRUE;
}

/**
 * Implements hook_field_widget_info().
 */
function islandora_object_field_field_widget_info() {
  return array(
    'islandora_object_field_autocomplete' => array(
      'label' => t('Autocomplete'),
      'field types' => array('islandora_object_field'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function islandora_object_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'fieldset',
    'pid' => array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'islandora_object_field/autocomplete/' . $field['field_name'],
      '#default_value' => isset($items[$delta]['pid']) ? $items[$delta]['pid'] : '',
    ),
  );
  d($field);
  return $element;
}

/**
 * Validation callback.
 */
function islandora_object_field_element_validate($form, &$form_state) {
  // TODO: Some validation.
}

/**
 * Implements hook_field_is_empty().
 */
function islandora_object_field_field_is_empty($item, $field) {
  if (empty($item['pid']) && (string) $item['pid'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Autocomplete callback.
 */
function islandora_object_field_autocomplete($field, $search) {
  // Get field settings and available cmodels.
  $field = field_info_field($field);
  $cmodels = array_filter($field['settings']['content_models']);
  $repository = islandora_get_tuque_connection()->repository;

  // Build UNION statement.
  $where_strings = array();
  foreach ($cmodels as $cmodel) {
    $where_strings[] = <<<EOQ
  {
    ?pid <fedora-model:label> ?label ;
    <fedora-model:hasModel> <info:fedora/$cmodel> .
    FILTER(regex(?label, '$search') || regex(str(?pid), '$search' ))
  }
EOQ;
  }

  // Sub in generic query if no cmodels defined.
  if (count($where_strings)) {
    $where_string = implode(' UNION ', $where_strings);
  } else {
    $where_string = "?pid <fedora-model:label> ?label ;\nFILTER(regex(?label, '$search') || regex(str(?pid), '$search' ))";
  }

  // SPARQL query.
  $results = $repository->ri->sparqlQuery("SELECT ?pid ?label WHERE { $where_string }");
  $return = array();
  foreach ($results as $objects) {
    $return[$objects['pid']['value']] = t('@label (@pid)', array(
      '@label' => $objects['label']['value'],
      '@pid' => $objects['pid']['value'],
    ));
  }

  // Return the results.
  drupal_json_output($return);
}

/**
 * Implements hook_field_formatter_info().
 */
function islandora_object_field_field_formatter_info() {
  return array(
    'islandora_object_field_label_formatter' => array(
      'label' => t('Object label'),
      'field types' => array('islandora_object_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function islandora_object_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'islandora_object_field_label_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'islandora_object_field_label',
          '#object' => $item['object'],
          '#pid' => $item['pid'],
          '#label' => $item['object']->label,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function islandora_object_field_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_object_field_label' => array(
      'template' => 'templates/islandora-object-field-label',
      'variables' => array('label' => NULL, 'pid' => NULL, 'object' => NULL),
    ),
  );
}

/**
 * Implements hook_field_load().
 */
function islandora_object_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  $repository = islandora_get_tuque_connection()->repository;
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      try {
        $items[$id][$delta]['object'] = $repository->getObject($items[$id][$delta]['pid']);
      } catch (RepositoryException $e) {
        unset($items[$id][$delta]);
      }
    }
  }
}
